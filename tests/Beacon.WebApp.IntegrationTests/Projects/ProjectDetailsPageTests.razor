@using Beacon.Common.Models
@using Beacon.Common.Requests.Instruments
@using Beacon.Common.Requests.Laboratories
@using Beacon.Common.Requests.Memberships
@using Beacon.Common.Requests.Projects
@using BeaconUI.Core.Projects.Pages
@inherits BeaconTestContext

@code {
    private static ProjectDto TestProject { get; } = new()
    {
        Id = Guid.NewGuid(),
        ProjectCode = "ABC-123456-001",
        CustomerName = "Test Customer",
        Applications = ["App1", "App2"],
        ProjectStatus = ProjectStatus.Active,
        LeadAnalyst = new ProjectDto.LeadAnalystDto { Id = Guid.NewGuid(), DisplayName = "Test Analyst" }
    };

    [Fact]
    public void ProjectDetailsPage_DisplaysCorrectData()
    {
        this.SetAuthorized();
        MockApi.Succeeds<GetProjectByProjectCodeRequest, ProjectDto>(TestProject);
        MockApi.Succeeds<GetAnalystsRequest, LaboratoryMemberDto[]>([]);
        MockApi.Succeeds<GetLaboratoryEventsRequest, PagedList<LaboratoryEventDto>>(new PagedList<LaboratoryEventDto>([], 0, 1, 1));
        MockApi.Succeeds<GetLaboratoryInstrumentsRequest, LaboratoryInstrumentDto[]>([]);
        
        var sut = Render(@<ProjectDetailsPage Code="@TestProject.ProjectCode" />);
        sut.WaitForAssertion(() =>
        {
            sut.Markup.Should().Contain(TestProject.ProjectCode)
                .And.Contain(TestProject.CustomerName)
                .And.Contain(TestProject.Applications.First())
                .And.Contain(TestProject.ProjectStatus.GetDescription())
                .And.Contain(TestProject.LeadAnalyst!.DisplayName)
            ;
        }, TimeSpan.FromSeconds(5));
    }

    [Fact]
    public void ProjectDetailsPage_DisplaysErrorWhenApiCallFails()
    {
        this.SetAuthorized();
        MockApi.Fails<GetProjectByProjectCodeRequest, ProjectDto>();

        var sut = Render(@<ProjectDetailsPage Code="@TestProject.ProjectCode" />);
        sut.WaitForAssertion(() => sut.Markup.Should().Contain("error"), TimeSpan.FromSeconds(5));
    }
}
