@using Beacon.Common.Models
@using Beacon.Common.Requests.Memberships
@using Beacon.Common.Requests.Projects
@using BeaconUI.Core.Projects.Pages
@inherits BeaconTestContext

@code {
    
    private static LaboratoryMemberDto LeadAnalyst { get; } = new()
    {
        Id = Guid.NewGuid(),
        DisplayName = "Test Analyst",
        EmailAddress = "analyst@test.net",
        MembershipType = LaboratoryMembershipType.Analyst
    };
    
    private static ProjectDto TestProject { get; } = new()
    {
        Id = Guid.NewGuid(),
        ProjectCode = "P12345",
        CustomerName = "Test Customer",
        Applications = ["App1", "App2"],
        ProjectStatus = ProjectStatus.Active,
        LeadAnalyst = new ProjectDto.LeadAnalystDto
        {
            Id = LeadAnalyst.Id,
            DisplayName = LeadAnalyst.DisplayName
        }
    };

    [Fact]
    public void ProjectDashboardPage_DisplaysCorrectData()
    {
        this.SetAuthorized();

        var mockProjectsResponse = new PagedList<ProjectDto>([TestProject], 1, 1, 1);
        MockApi.Succeeds<GetProjectsRequest, PagedList<ProjectDto>>(mockProjectsResponse);

        var mockLeadAnalystResponse = new[] { LeadAnalyst };
        MockApi.Succeeds<GetAnalystsRequest, LaboratoryMemberDto[]>(mockLeadAnalystResponse);
        
        var sut = Render(@<ProjectDashboardPage />);
        sut.WaitForAssertion(() =>
        {
            sut.Markup.Should()
                .Contain(TestProject.ProjectCode).And
                .Contain(TestProject.CustomerName).And
                .Contain(TestProject.Applications.First()).And
                .Contain(TestProject.ProjectStatus.ToString());
            
        }, TimeSpan.FromSeconds(5));
    }

    [Fact]
    public void ProjectDashboardPage_DisplaysErrorWhenApiCallFails()
    {
        this.SetAuthorized();
        MockApi.Fails<GetProjectsRequest, PagedList<ProjectDto>>();

        var sut = Render(@<ProjectDashboardPage />);
        sut.WaitForAssertion(() => sut.Markup.Should().Contain("error"), TimeSpan.FromSeconds(5));
    }
}
