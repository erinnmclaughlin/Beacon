// <auto-generated />
using System;
using Beacon.API.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Beacon.StorageProviders.Postgres.Migrations
{
    [DbContext(typeof(BeaconDbContext))]
    partial class BeaconDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Beacon.API.Persistence.Entities.Invitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AcceptedById")
                        .HasColumnType("uuid")
                        .HasColumnName("accepted_by_id");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<double>("ExpireAfterDays")
                        .HasColumnType("double precision")
                        .HasColumnName("expire_after_days");

                    b.Property<Guid>("LaboratoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("laboratory_id");

                    b.Property<string>("MembershipType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("membership_type");

                    b.Property<string>("NewMemberEmailAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("new_member_email_address");

                    b.HasKey("Id")
                        .HasName("pk_invitations");

                    b.HasIndex("AcceptedById")
                        .HasDatabaseName("ix_invitations_accepted_by_id");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_invitations_created_by_id");

                    b.HasIndex("LaboratoryId")
                        .HasDatabaseName("ix_invitations_laboratory_id");

                    b.ToTable("invitations", (string)null);
                });

            modelBuilder.Entity("Beacon.API.Persistence.Entities.InvitationEmail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("ExpiresOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_on");

                    b.Property<Guid>("LaboratoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("laboratory_id");

                    b.Property<Guid>("LaboratoryInvitationId")
                        .HasColumnType("uuid")
                        .HasColumnName("laboratory_invitation_id");

                    b.Property<string>("OperationId")
                        .HasColumnType("text")
                        .HasColumnName("operation_id");

                    b.Property<DateTimeOffset>("SentOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_on");

                    b.HasKey("Id")
                        .HasName("pk_invitation_emails");

                    b.HasIndex("LaboratoryId")
                        .HasDatabaseName("ix_invitation_emails_laboratory_id");

                    b.HasIndex("LaboratoryInvitationId")
                        .HasDatabaseName("ix_invitation_emails_laboratory_invitation_id");

                    b.ToTable("invitation_emails", (string)null);
                });

            modelBuilder.Entity("Beacon.API.Persistence.Entities.Laboratory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_laboratories");

                    b.ToTable("laboratories", (string)null);
                });

            modelBuilder.Entity("Beacon.API.Persistence.Entities.LaboratoryInstrument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("InstrumentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("instrument_type");

                    b.Property<Guid>("LaboratoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("laboratory_id");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("serial_number");

                    b.HasKey("Id")
                        .HasName("pk_laboratory_instruments");

                    b.HasIndex("LaboratoryId")
                        .HasDatabaseName("ix_laboratory_instruments_laboratory_id");

                    b.ToTable("laboratory_instruments", (string)null);
                });

            modelBuilder.Entity("Beacon.API.Persistence.Entities.LaboratoryInstrumentUsage", b =>
                {
                    b.Property<Guid>("InstrumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("instrument_id");

                    b.Property<Guid>("ProjectEventId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_event_id");

                    b.Property<Guid>("LaboratoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("laboratory_id");

                    b.HasKey("InstrumentId", "ProjectEventId")
                        .HasName("pk_laboratory_instrument_usage");

                    b.HasIndex("LaboratoryId")
                        .HasDatabaseName("ix_laboratory_instrument_usage_laboratory_id");

                    b.HasIndex("ProjectEventId")
                        .HasDatabaseName("ix_laboratory_instrument_usage_project_event_id");

                    b.ToTable("laboratory_instrument_usage", (string)null);
                });

            modelBuilder.Entity("Beacon.API.Persistence.Entities.Membership", b =>
                {
                    b.Property<Guid>("LaboratoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("laboratory_id");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid")
                        .HasColumnName("member_id");

                    b.Property<string>("MembershipType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("membership_type");

                    b.HasKey("LaboratoryId", "MemberId")
                        .HasName("pk_memberships");

                    b.HasIndex("MemberId")
                        .HasDatabaseName("ix_memberships_member_id");

                    b.ToTable("memberships", (string)null);
                });

            modelBuilder.Entity("Beacon.API.Persistence.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("customer_name");

                    b.Property<Guid>("LaboratoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("laboratory_id");

                    b.Property<Guid?>("LeadAnalystId")
                        .HasColumnType("uuid")
                        .HasColumnName("lead_analyst_id");

                    b.Property<string>("ProjectStatus")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("project_status");

                    b.HasKey("Id")
                        .HasName("pk_projects");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_projects_created_by_id");

                    b.HasIndex("LaboratoryId")
                        .HasDatabaseName("ix_projects_laboratory_id");

                    b.HasIndex("LeadAnalystId")
                        .HasDatabaseName("ix_projects_lead_analyst_id");

                    b.HasIndex("ProjectStatus")
                        .HasDatabaseName("ix_projects_project_status");

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("Beacon.API.Persistence.Entities.ProjectApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("LaboratoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("laboratory_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_project_applications");

                    b.HasIndex("LaboratoryId")
                        .HasDatabaseName("ix_project_applications_laboratory_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_project_applications_name");

                    b.ToTable("project_applications", (string)null);
                });

            modelBuilder.Entity("Beacon.API.Persistence.Entities.ProjectApplicationTag", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid")
                        .HasColumnName("application_id");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<Guid>("LaboratoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("laboratory_id");

                    b.HasKey("ApplicationId", "ProjectId")
                        .HasName("pk_project_application_tags");

                    b.HasIndex("LaboratoryId")
                        .HasDatabaseName("ix_project_application_tags_laboratory_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_project_application_tags_project_id");

                    b.ToTable("project_application_tags", (string)null);
                });

            modelBuilder.Entity("Beacon.API.Persistence.Entities.ProjectContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email_address");

                    b.Property<Guid>("LaboratoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("laboratory_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("phone_number");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.HasKey("Id")
                        .HasName("pk_project_contacts");

                    b.HasIndex("LaboratoryId")
                        .HasDatabaseName("ix_project_contacts_laboratory_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_project_contacts_project_id");

                    b.ToTable("project_contacts", (string)null);
                });

            modelBuilder.Entity("Beacon.API.Persistence.Entities.ProjectEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("LaboratoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("laboratory_id");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<DateTimeOffset>("ScheduledEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scheduled_end");

                    b.Property<DateTimeOffset>("ScheduledStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scheduled_start");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_project_events");

                    b.HasIndex("LaboratoryId")
                        .HasDatabaseName("ix_project_events_laboratory_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_project_events_project_id");

                    b.ToTable("project_events", (string)null);
                });

            modelBuilder.Entity("Beacon.API.Persistence.Entities.SampleGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ContainerType")
                        .HasColumnType("text")
                        .HasColumnName("container_type");

                    b.Property<bool?>("IsHazardous")
                        .HasColumnType("boolean")
                        .HasColumnName("is_hazardous");

                    b.Property<bool?>("IsLightSensitive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_light_sensitive");

                    b.Property<Guid>("LaboratoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("laboratory_id");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<string>("SampleName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sample_name");

                    b.Property<double?>("TargetStorageHumidity")
                        .HasColumnType("double precision")
                        .HasColumnName("target_storage_humidity");

                    b.Property<double?>("TargetStorageTemperature")
                        .HasColumnType("double precision")
                        .HasColumnName("target_storage_temperature");

                    b.Property<double?>("Volume")
                        .HasColumnType("double precision")
                        .HasColumnName("volume");

                    b.HasKey("Id")
                        .HasName("pk_sample_groups");

                    b.HasIndex("LaboratoryId")
                        .HasDatabaseName("ix_sample_groups_laboratory_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_sample_groups_project_id");

                    b.ToTable("sample_groups", (string)null);
                });

            modelBuilder.Entity("Beacon.API.Persistence.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email_address");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hashed_password");

                    b.Property<byte[]>("HashedPasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("hashed_password_salt");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("EmailAddress")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email_address");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Beacon.API.Persistence.Entities.Invitation", b =>
                {
                    b.HasOne("Beacon.API.Persistence.Entities.User", "AcceptedBy")
                        .WithMany()
                        .HasForeignKey("AcceptedById")
                        .HasConstraintName("fk_invitations_users_accepted_by_id");

                    b.HasOne("Beacon.API.Persistence.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_invitations_users_created_by_id");

                    b.HasOne("Beacon.API.Persistence.Entities.Laboratory", "Laboratory")
                        .WithMany()
                        .HasForeignKey("LaboratoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_invitations_laboratories_laboratory_id");

                    b.Navigation("AcceptedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("Laboratory");
                });

            modelBuilder.Entity("Beacon.API.Persistence.Entities.InvitationEmail", b =>
                {
                    b.HasOne("Beacon.API.Persistence.Entities.Laboratory", "Laboratory")
                        .WithMany()
                        .HasForeignKey("LaboratoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_invitation_emails_laboratories_laboratory_id");

                    b.HasOne("Beacon.API.Persistence.Entities.Invitation", "LaboratoryInvitation")
                        .WithMany("EmailInvitations")
                        .HasForeignKey("LaboratoryInvitationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_invitation_emails_invitations_laboratory_invitation_id");

                    b.Navigation("Laboratory");

                    b.Navigation("LaboratoryInvitation");
                });

            modelBuilder.Entity("Beacon.API.Persistence.Entities.LaboratoryInstrument", b =>
                {
                    b.HasOne("Beacon.API.Persistence.Entities.Laboratory", "Laboratory")
                        .WithMany()
                        .HasForeignKey("LaboratoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_laboratory_instruments_laboratories_laboratory_id");

                    b.Navigation("Laboratory");
                });

            modelBuilder.Entity("Beacon.API.Persistence.Entities.LaboratoryInstrumentUsage", b =>
                {
                    b.HasOne("Beacon.API.Persistence.Entities.LaboratoryInstrument", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_laboratory_instrument_usage_laboratory_instruments_instrume");

                    b.HasOne("Beacon.API.Persistence.Entities.Laboratory", "Laboratory")
                        .WithMany()
                        .HasForeignKey("LaboratoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_laboratory_instrument_usage_laboratories_laboratory_id");

                    b.HasOne("Beacon.API.Persistence.Entities.ProjectEvent", "ProjectEvent")
                        .WithMany()
                        .HasForeignKey("ProjectEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_laboratory_instrument_usage_project_events_project_event_id");

                    b.Navigation("Instrument");

                    b.Navigation("Laboratory");

                    b.Navigation("ProjectEvent");
                });

            modelBuilder.Entity("Beacon.API.Persistence.Entities.Membership", b =>
                {
                    b.HasOne("Beacon.API.Persistence.Entities.Laboratory", "Laboratory")
                        .WithMany("Memberships")
                        .HasForeignKey("LaboratoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_memberships_laboratories_laboratory_id");

                    b.HasOne("Beacon.API.Persistence.Entities.User", "Member")
                        .WithMany("Memberships")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_memberships_users_member_id");

                    b.Navigation("Laboratory");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Beacon.API.Persistence.Entities.Project", b =>
                {
                    b.HasOne("Beacon.API.Persistence.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_projects_users_created_by_id");

                    b.HasOne("Beacon.API.Persistence.Entities.Laboratory", "Laboratory")
                        .WithMany("Projects")
                        .HasForeignKey("LaboratoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_projects_laboratories_laboratory_id");

                    b.HasOne("Beacon.API.Persistence.Entities.User", "LeadAnalyst")
                        .WithMany("Projects")
                        .HasForeignKey("LeadAnalystId")
                        .HasConstraintName("fk_projects_users_lead_analyst_id");

                    b.OwnsOne("Beacon.Common.Models.ProjectCode", "ProjectCode", b1 =>
                        {
                            b1.Property<Guid>("ProjectId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("CustomerCode")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("project_code_customer_code");

                            b1.Property<string>("Date")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("project_code_date");

                            b1.Property<int>("Suffix")
                                .HasColumnType("integer")
                                .HasColumnName("project_code_suffix");

                            b1.HasKey("ProjectId");

                            b1.HasIndex("CustomerCode", "Suffix")
                                .HasDatabaseName("ix_projects_project_code_customer_code_project_code_suffix");

                            b1.ToTable("projects");

                            b1.WithOwner()
                                .HasForeignKey("ProjectId")
                                .HasConstraintName("fk_projects_projects_id");
                        });

                    b.Navigation("CreatedBy");

                    b.Navigation("Laboratory");

                    b.Navigation("LeadAnalyst");

                    b.Navigation("ProjectCode")
                        .IsRequired();
                });

            modelBuilder.Entity("Beacon.API.Persistence.Entities.ProjectApplication", b =>
                {
                    b.HasOne("Beacon.API.Persistence.Entities.Laboratory", "Laboratory")
                        .WithMany()
                        .HasForeignKey("LaboratoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_project_applications_laboratories_laboratory_id");

                    b.Navigation("Laboratory");
                });

            modelBuilder.Entity("Beacon.API.Persistence.Entities.ProjectApplicationTag", b =>
                {
                    b.HasOne("Beacon.API.Persistence.Entities.ProjectApplication", "Application")
                        .WithMany("TaggedProjects")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_application_tags_project_applications_application_id");

                    b.HasOne("Beacon.API.Persistence.Entities.Laboratory", "Laboratory")
                        .WithMany()
                        .HasForeignKey("LaboratoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_project_application_tags_laboratories_laboratory_id");

                    b.HasOne("Beacon.API.Persistence.Entities.Project", "Project")
                        .WithMany("TaggedApplications")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_application_tags_projects_project_id");

                    b.Navigation("Application");

                    b.Navigation("Laboratory");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Beacon.API.Persistence.Entities.ProjectContact", b =>
                {
                    b.HasOne("Beacon.API.Persistence.Entities.Laboratory", "Laboratory")
                        .WithMany()
                        .HasForeignKey("LaboratoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_project_contacts_laboratories_laboratory_id");

                    b.HasOne("Beacon.API.Persistence.Entities.Project", "Project")
                        .WithMany("Contacts")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_contacts_projects_project_id");

                    b.Navigation("Laboratory");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Beacon.API.Persistence.Entities.ProjectEvent", b =>
                {
                    b.HasOne("Beacon.API.Persistence.Entities.Laboratory", "Laboratory")
                        .WithMany()
                        .HasForeignKey("LaboratoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_project_events_laboratories_laboratory_id");

                    b.HasOne("Beacon.API.Persistence.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_events_projects_project_id");

                    b.Navigation("Laboratory");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Beacon.API.Persistence.Entities.SampleGroup", b =>
                {
                    b.HasOne("Beacon.API.Persistence.Entities.Laboratory", "Laboratory")
                        .WithMany()
                        .HasForeignKey("LaboratoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_sample_groups_laboratories_laboratory_id");

                    b.HasOne("Beacon.API.Persistence.Entities.Project", "Project")
                        .WithMany("SampleGroups")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sample_groups_projects_project_id");

                    b.Navigation("Laboratory");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Beacon.API.Persistence.Entities.Invitation", b =>
                {
                    b.Navigation("EmailInvitations");
                });

            modelBuilder.Entity("Beacon.API.Persistence.Entities.Laboratory", b =>
                {
                    b.Navigation("Memberships");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Beacon.API.Persistence.Entities.Project", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("SampleGroups");

                    b.Navigation("TaggedApplications");
                });

            modelBuilder.Entity("Beacon.API.Persistence.Entities.ProjectApplication", b =>
                {
                    b.Navigation("TaggedProjects");
                });

            modelBuilder.Entity("Beacon.API.Persistence.Entities.User", b =>
                {
                    b.Navigation("Memberships");

                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
